@page "/variableindicador"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JS

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Variables por indicador </b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>
                        <!-- Mostrar botones según rol -->
                        @if (puedeAgregarEliminar)
                        {
                            <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                                <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                            </button>
                        }
                        @if (puedeAgregarEliminar)
                        {
                            <button class="btn btn-success btn-sm" @onclick="AbrirModal">
                                <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                            </button>
                        }
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (Variableindicadores == null || Variableindicadores.Count == 0)
            {
                <p>No hay Variables por indicador.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            @if (puedeAgregarEliminar)
                            {
                                <th>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@seleccionarTodos" disabled="@(!puedeAgregarEliminar)">
                                        <label></label>
                                    </span>
                                </th>
                            }
                            <th>Id</th>
                            <th>Dato</th>
                            @if (puedeEditar || puedeAgregarEliminar)
                            {
                                <th>Accion</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var variableindicador in Variableindicadores)
                        {
                            <tr>
                                @if (puedeAgregarEliminar) // Solo mostrar checkbox si tiene permiso para eliminar
                                {
                                    <td>
                                        <span class="custom-checkbox">
                                            <input type="checkbox" @bind="@VariableindicadoresSeleccionado[variableindicador]" disabled="@(!puedeAgregarEliminar)">
                                            <label></label>
                                        </span>
                                    </td>
                                }
                                <td>@ObtenerValor(variableindicador, "id")</td>
                                <td>@ObtenerValor(variableindicador, "dato")</td>
                                @if (puedeEditar || puedeAgregarEliminar)
                                {
                                    <td>
                                        @if (puedeEditar)
                                        {
                                            <a href="#" class="edit" @onclick="() => EditarVariableindicador(variableindicador)" @onclick:preventDefault>
                                                <i class="material-icons" title="Editar">&#xE254;</i>
                                            </a>
                                        }
                                        @if (puedeAgregarEliminar)
                                        {
                                            <a href="#" class="delete" @onclick="() => EliminarVariableindicador(variableindicador)" @onclick:preventDefault>
                                                <i class="material-icons" title="Eliminar">&#xE872;</i>
                                            </a>
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="GuardarVariableindicador">
                    <div class="modal-header">
                        <h4 class="modal-title">Agregar una Variable por indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Dato</label>
                            <input type="text" class="form-control" @bind="Dato" required>
                        </div>
                        <div class="form-group">
                            <label>Fecha del dato</label>
                            <input type="text" class="form-control" @bind="Fechadato" required>
                        </div>
                        <div class="form-group">
                            <label>Variable</label>
                            <input type="text" class="form-control" @bind="FkVariable" required>
                        </div>
                        <div class="form-group">
                            <label>Indicador</label>
                            <input type="text" class="form-control" @bind="FkIndicador" required>
                        </div>
                        <div class="form-group">
                            <label>Email del usuario</label>
                            <input type="text" class="form-control" @bind="FkEmailUsuario" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Variable por indicador</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Código de la Variable por indicador</label>
                        <input type="text" class="form-control" @bind="codigoVariableindicadorConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarVariableindicador">Buscar</button>

                    @if (variableindicadorConsultado != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Dato</label>
                            <input type="text" class="form-control" value="@datovariableindicadorConsulta" disabled>
                        </div>
                        <div class="form-group">
                            <label>Fecha del dato</label>
                            <input type="text" class="form-control" value="@fechavariableindicadorConsulta" disabled>
                        </div>
                        <div class="form-group">
                            <label>Variable</label>
                            <input type="text" class="form-control" value="@foraneavariableConsulta" disabled>
                        </div>
                        <div class="form-group">
                            <label>Indicador</label>
                            <input type="text" class="form-control" value="@foraneaindicadorConsulta" disabled>
                        </div>
                        <div class="form-group">
                            <label>Email del usuario</label>
                            <input type="text" class="form-control" value="@foraneaemailconsultaConsulta" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="this" OnValidSubmit="ActualizarVariableindicador">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Variable por indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Id</label>
                            <input type="text" class="form-control" @bind="codigoVariableindicadorEditar" readonly>
                        </div>
                        <div class="form-group">
                            <label>Dato</label>
                            <input type="text" class="form-control" @bind="datoVariableindicadorEditar" required>
                        </div>
                        <div class="form-group">
                            <label>Fecha del dato</label>
                            <input type="text" class="form-control" @bind="fechaVariableindicadorEditar" required>
                        </div>
                        <div class="form-group">
                            <label>Variable</label>
                            <input type="text" class="form-control" @bind="foraneaVariableEditar" required>
                        </div>
                        <div class="form-group">
                            <label>Indicador</label>
                            <input type="text" class="form-control" @bind="foraneaindicadorEditar" required>
                        </div>
                        <div class="form-group">
                            <label>Email del usuario</label>
                            <input type="text" class="form-control" @bind="foraneaEmailusuarioEditar" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}



@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarVariableindicador">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Variable por indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro(a) de que desea eliminar esta Variable por indicador?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Variables por indicador Seleccionados</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar las Variable por indicador seleccionadas?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    private List<Dictionary<string, object>> Variableindicadores = new List<Dictionary<string, object>>();
    private Dictionary<Dictionary<string, object>, bool> VariableindicadoresSeleccionado = new();
    private bool cargando = true;
    private string? errorMensaje = null;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var clave in VariableindicadoresSeleccionado.Keys.ToList())
            {
                VariableindicadoresSeleccionado[clave] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;
    private bool mostrarModal = false;
    private string IdVariableindicador = "";
    private string Dato = "";
    private string Fechadato = "";
    private string FkVariable = "";
    private string FkIndicador = "";
    private string FkEmailUsuario = "";

    // Variables para controlar el modal de consulta
    private bool mostrarModalConsulta = false;
    private string codigoVariableindicadorConsulta = "";

    // Variables para mostrar los datos del actor consultado
    private Dictionary<string, object>? variableindicadorConsultado = null;
    private string datovariableindicadorConsulta = "";
    private string fechavariableindicadorConsulta = "";
    private string foraneavariableConsulta = "";
    private string foraneaindicadorConsulta = "";
    private string foraneaemailconsultaConsulta = "";

    private int stockvariableindicadorConsulta = 0;
    private decimal valorUnitariovariableindicadorConsulta = 0.0m;

    // Variables para el modal de edición
    private bool mostrarModalEditar = false;
    private Dictionary<string, object>? variableindicadorParaEditar = null;
    private string codigoVariableindicadorEditar = "";
    private string datoVariableindicadorEditar = "";
    private string fechaVariableindicadorEditar = "";
    private string foraneaVariableEditar = "";
    private string foraneaindicadorEditar = "";
    private string foraneaEmailusuarioEditar = "";

    // Variables para el modal de eliminación
    private bool mostrarModalEliminar = false;
    private Dictionary<string, object>? VariableindicadorParaEliminar = null;

    // Variables para el modal de eliminación múltiple
    private bool mostrarModalEliminarMultiples = false;

    // Nuevas propiedades para control de acceso
    private bool esAdmin = false;
    private bool esValidador = false;
    private bool esVerificador = false;
    private bool puedeEditar => esAdmin || esValidador;
    private bool puedeAgregarEliminar => esAdmin;
    private bool puedeConsultar => true; // Todos pueden consultar
    protected override async Task OnInitializedAsync()
    {
        await CargarVariableindicador();
        await VerificarRoles();
    }
    private async Task VerificarRoles()
    {
        // Obtener roles de sessionStorage
        var rolAdmin = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_admin");
        var rolValidador = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_Validador");
        var rolVerificador = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_Verificador");

        esAdmin = !string.IsNullOrEmpty(rolAdmin);
        esValidador = !string.IsNullOrEmpty(rolValidador);
        esVerificador = !string.IsNullOrEmpty(rolVerificador);
    }
    private async Task CargarVariableindicador()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "variablesporindicador");
            Variableindicadores = resultado ?? new List<Dictionary<string, object>>();
            VariableindicadoresSeleccionado = Variableindicadores.ToDictionary(p => p, p => false);
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar actor: {ex.Message}";
            Variableindicadores = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }
    private async Task GuardarVariableindicador()
    {
        if (!puedeAgregarEliminar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }

        if (string.IsNullOrEmpty(Dato) ||
            string.IsNullOrEmpty(Fechadato) ||
            string.IsNullOrEmpty(FkVariable) ||
            string.IsNullOrEmpty(FkIndicador) ||
            string.IsNullOrEmpty(FkEmailUsuario))
        {
            errorMensaje = "Todos los campos son obligatorios.";
            return;
        }

        var nuevoVariableindicador = new Dictionary<string, object>
        {
            { "dato", Dato },
            { "fechadato", Fechadato },
            { "fkidvariable", FkVariable },
            { "fkidindicador", FkIndicador },
            { "fkemailusuario", FkEmailUsuario },
        };

        bool resultado = await servicioEntidad.CrearAsync("proyecto", "variablesporindicador", nuevoVariableindicador);

        if (resultado)
        {
            await CargarVariableindicador(); // 🔄 Refrescar para obtener el ID generado por la base de datos
            CerrarModal();
        }
        else
        {
            errorMensaje = "Error al guardar la Variable por indicador en la base de datos.";
        }
    }


    private void AbrirModal()
    {
        mostrarModal = true;
        Dato = "";
        Fechadato = "";
        FkVariable = "";
        FkIndicador = "";
        FkEmailUsuario = "";
    }

    private void CerrarModal()
    {
        mostrarModal = false;
    }
    private async Task ConsultarVariableindicador()
    {
        if (string.IsNullOrEmpty(codigoVariableindicadorConsulta))
        {
            errorMensaje = "Debe ingresar un código de Variable por indicador.";
            return;
        }

        var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "variablesporindicador", "Id", codigoVariableindicadorConsulta);

        if (resultado != null)
        {
            variableindicadorConsultado = resultado;
            datovariableindicadorConsulta = ObtenerValor(resultado, "dato");
            fechavariableindicadorConsulta = ObtenerValor(resultado, "fechadato");
            foraneavariableConsulta = ObtenerValor(resultado, "fkidvariable");
            foraneaindicadorConsulta = ObtenerValor(resultado, "fkidindicador");
            foraneaemailconsultaConsulta = ObtenerValor(resultado, "fkemailusuario");
        }
        else
        {
            errorMensaje = "No se encontró la Variable por indicador.";
            variableindicadorConsultado = null;
            datovariableindicadorConsulta = "";
            fechavariableindicadorConsulta = "";
            foraneavariableConsulta = "";
            foraneaindicadorConsulta = "";
            foraneaemailconsultaConsulta = "";
        }
    }
    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        codigoVariableindicadorConsulta = "";
        variableindicadorConsultado = null;
        datovariableindicadorConsulta = "";
        fechavariableindicadorConsulta = "";
        foraneavariableConsulta = "";
        foraneaindicadorConsulta = "";
        foraneaemailconsultaConsulta = "";
    }

    private void EditarVariableindicadorSeleccionado()
    {
        var seleccionado = VariableindicadoresSeleccionado.FirstOrDefault(x => x.Value).Key;
        if (seleccionado != null)
        {
            EditarVariableindicador(seleccionado);
        }
        else
        {
            errorMensaje = "Debe seleccionar una Variable para editar.";
        }
    }
    private void EditarVariableindicador(Dictionary<string, object> variableindicador)
    {
        variableindicadorParaEditar = variableindicador;
        
        // Cargar datos del tipoactor en el formulario de edición
        codigoVariableindicadorEditar = ObtenerValor(variableindicador, "id");
        datoVariableindicadorEditar = ObtenerValor(variableindicador, "dato");
        fechaVariableindicadorEditar = ObtenerValor(variableindicador, "fechadato");
        foraneaVariableEditar = ObtenerValor(variableindicador, "fkidvariable");
        foraneaindicadorEditar = ObtenerValor(variableindicador, "fkidindicador");
        foraneaEmailusuarioEditar = ObtenerValor(variableindicador, "fkemailusuario");
        
        mostrarModalEditar = true;
    }
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }
    private async Task ActualizarVariableindicador()
    {
        if (!puedeEditar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }

        if (variableindicadorParaEditar == null || 
            string.IsNullOrEmpty(datoVariableindicadorEditar) ||
            string.IsNullOrEmpty(fechaVariableindicadorEditar) ||
            string.IsNullOrEmpty(foraneaVariableEditar) ||
            string.IsNullOrEmpty(foraneaindicadorEditar) ||
            string.IsNullOrEmpty(foraneaEmailusuarioEditar))
        {
            errorMensaje = "Los campos son obligatorios.";
            return;
        }

        var datosvariableindicadorActualizado = new Dictionary<string, object>
        {
            { "id", codigoVariableindicadorEditar },
            { "dato", datoVariableindicadorEditar },
            { "fechadato", fechaVariableindicadorEditar },
            { "fkidvariable", foraneaVariableEditar },
            { "fkidindicador", foraneaindicadorEditar },
            { "fkemailusuario", foraneaEmailusuarioEditar },
        };

        bool resultado = await servicioEntidad.ActualizarAsync(
        "proyecto",
        "variablesporindicador",
        "id",                    // <- este es el nombre de la clave primaria
        codigoVariableindicadorEditar,  // <- este es el valor de la clave primaria
        datosvariableindicadorActualizado);


        if (resultado)
        {
            // Actualizar el actor en la lista local
            int indice = Variableindicadores.IndexOf(variableindicadorParaEditar);
            if (indice >= 0)
            {
                Variableindicadores[indice] = datosvariableindicadorActualizado;
                VariableindicadoresSeleccionado.Remove(variableindicadorParaEditar);
                VariableindicadoresSeleccionado[datosvariableindicadorActualizado] = false;
            }
            CerrarModalEditar();
        }
        else
        {
            errorMensaje = "Error al actualizar la Variable por indicador en la base de datos.";
        }
    }
    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
        variableindicadorParaEditar = null;
    }
    private void EliminarVariableindicador(Dictionary<string, object> variableindicador)
    {
        VariableindicadorParaEliminar = variableindicador;
        mostrarModalEliminar = true;
    }
    private async Task ConfirmarEliminarVariableindicador()
    {
        if (VariableindicadorParaEliminar != null)
        {
            string id = ObtenerValor(VariableindicadorParaEliminar, "id");
            
            // Eliminar de la base de datos
            bool resultado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "variablesporindicador", 
                "id", 
                id);
                
            if (resultado)
            {
                // Eliminar de la lista local
                Variableindicadores.Remove(VariableindicadorParaEliminar);
                VariableindicadoresSeleccionado.Remove(VariableindicadorParaEliminar);
            }
            else
            {
                errorMensaje = "Error al eliminar la Variable por indicador de la base de datos.";
            }
            
            CerrarModalEliminar();
        }
    }
    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        VariableindicadorParaEliminar = null;
    }
    private void MostrarModalEliminarMultiples()
    {
        // Verificar si hay actores seleccionados
        var haySeleccionados = VariableindicadoresSeleccionado.Any(x => x.Value);
        if (!haySeleccionados)
        {
            errorMensaje = "Debe seleccionar al menos una Variable por indicador para eliminar.";
            return;
        }
        
        mostrarModalEliminarMultiples = true;
    }
    private async Task ConfirmarEliminarSeleccionados()
    {
        await EliminarSeleccionados();
        CerrarModalEliminarMultiples();
    }
    private async Task EliminarSeleccionados()
    {
        if (!puedeAgregarEliminar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }
        
        var seleccionados = VariableindicadoresSeleccionado.Where(x => x.Value).Select(x => x.Key).ToList();
        
        foreach (var variableindicador in seleccionados)
        {
            string codigo = ObtenerValor(variableindicador, "id");
            bool resultado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "variablesporindicador", 
                "id", 
                codigo);
                
            if (resultado)
            {
                Variableindicadores.Remove(variableindicador);
                VariableindicadoresSeleccionado.Remove(variableindicador);
            }
        }
        seleccionarTodos = false;
    }
    private void CerrarModalEliminarMultiples()
    {
        mostrarModalEliminarMultiples = false;
    }
}