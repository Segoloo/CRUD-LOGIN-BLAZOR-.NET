@page "/fuente"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JS

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Fuente</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>
                        <!-- Mostrar botones según rol -->
                        @if (puedeAgregarEliminar)
                        {
                            <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                                <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                            </button>
                        }
                        @if (puedeAgregarEliminar)
                        {
                            <button class="btn btn-success btn-sm" @onclick="AbrirModal">
                                <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                            </button>
                        }
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (Fuentes == null || Fuentes.Count == 0)
            {
                <p>No hay Fuente.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            @if (puedeAgregarEliminar)
                            {
                                <th>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@seleccionarTodos" disabled="@(!puedeAgregarEliminar)">
                                        <label></label>
                                    </span>
                                </th>
                            }
                            <th>Id</th>
                            <th>Nombre</th>
                            @if (puedeEditar || puedeAgregarEliminar)
                            {
                                <th>Accion</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var fuente in Fuentes)
                        {
                            <tr>
                                @if (puedeAgregarEliminar) // Solo mostrar checkbox si tiene permiso para eliminar
                                {
                                    <td>
                                        <span class="custom-checkbox">
                                            <input type="checkbox" @bind="@FuentesSeleccionado[fuente]" disabled="@(!puedeAgregarEliminar)">
                                            <label></label>
                                        </span>
                                    </td>
                                }
                                <td>@ObtenerValor(fuente, "id")</td>
                                <td>@ObtenerValor(fuente, "nombre")</td>
                                @if (puedeEditar || puedeAgregarEliminar)
                                {
                                    <td>
                                        @if (puedeEditar)
                                        {
                                            <a href="#" class="edit" @onclick="() => EditarFuente(fuente)" @onclick:preventDefault>
                                                <i class="material-icons" title="Editar">&#xE254;</i>
                                            </a>
                                        }
                                        @if (puedeAgregarEliminar)
                                        {
                                            <a href="#" class="delete" @onclick="() => EliminarFuente(fuente)" @onclick:preventDefault>
                                                <i class="material-icons" title="Eliminar">&#xE872;</i>
                                            </a>
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="GuardarFuente">
                    <div class="modal-header">
                        <h4 class="modal-title">Agregar Fuente</h4>
                        <button type="button" class="close" @onclick="CerrarModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" @bind="nombreFuente" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Fuente</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Código del Fuente</label>
                        <input type="text" class="form-control" @bind="codigoFuenteConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarFuente">Buscar</button>

                    @if (fuenteConsultado != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" value="@nombrefuenteConsulta" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="this" OnValidSubmit="ActualizarFuente">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Fuente</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Id</label>
                            <input type="text" class="form-control" @bind="codigoFuenteEditar" readonly>
                        </div>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" @bind="nombreFuenteEditar" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}



@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarFuente">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Fuente</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro(a) de que desea eliminar este Fuente?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Fuentes Seleccionadas</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar las Fuentes seleccionadas?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>  
    </div>
}

@code {
    private List<Dictionary<string, object>> Fuentes = new List<Dictionary<string, object>>();
    private Dictionary<Dictionary<string, object>, bool> FuentesSeleccionado = new();
    private bool cargando = true;
    private string? errorMensaje = null;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var clave in FuentesSeleccionado.Keys.ToList())
            {
                FuentesSeleccionado[clave] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;
    private bool mostrarModal = false;
    private string IdFuente = "";
    private string nombreFuente = "";

    // Variables para controlar el modal de consulta
    private bool mostrarModalConsulta = false;
    private string codigoFuenteConsulta = "";

    // Variables para mostrar los datos de la Fuente consultada
    private Dictionary<string, object>? fuenteConsultado = null;
    private string nombrefuenteConsulta = "";
    private int stockfuenteConsulta = 0;
    private decimal valorUnitariofuenteConsulta = 0.0m;

    // Variables para el modal de edición
    private bool mostrarModalEditar = false;
    private Dictionary<string, object>? fuenteParaEditar = null;
    private string codigoFuenteEditar = "";
    private string nombreFuenteEditar = "";

    // Variables para el modal de eliminación
    private bool mostrarModalEliminar = false;
    private Dictionary<string, object>? FuenteParaEliminar = null;

    // Variables para el modal de eliminación múltiple
    private bool mostrarModalEliminarMultiples = false;

    // Nuevas propiedades para control de acceso
    private bool esAdmin = false;
    private bool esValidador = false;
    private bool esVerificador = false;
    private bool puedeEditar => esAdmin || esValidador;
    private bool puedeAgregarEliminar => esAdmin;
    private bool puedeConsultar => true; // Todos pueden consultar
    protected override async Task OnInitializedAsync()
    {
        await CargarFuente();
        await VerificarRoles();
    }
    private async Task VerificarRoles()
    {
        // Obtener roles de sessionStorage
        var rolAdmin = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_admin");
        var rolValidador = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_Validador");
        var rolVerificador = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_Verificador");

        esAdmin = !string.IsNullOrEmpty(rolAdmin);
        esValidador = !string.IsNullOrEmpty(rolValidador);
        esVerificador = !string.IsNullOrEmpty(rolVerificador);
    }
    private async Task CargarFuente()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "fuente");
            Fuentes = resultado ?? new List<Dictionary<string, object>>();
            FuentesSeleccionado = Fuentes.ToDictionary(p => p, p => false);
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar fuente: {ex.Message}";
            Fuentes = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }
    private async Task GuardarFuente()
    {
        if (!puedeAgregarEliminar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }

        if (string.IsNullOrEmpty(nombreFuente))
        {
            errorMensaje = "El código y el nombre de la Fuente son obligatorios.";
            return;
        }

        var nuevoFuente = new Dictionary<string, object>
        {
            { "nombre", nombreFuente },
        };

        bool resultado = await servicioEntidad.CrearAsync("proyecto", "fuente", nuevoFuente);

        if (resultado)
        {
            await CargarFuente(); // 🔄 Refrescar para obtener el ID generado por la base de datos
            CerrarModal();
        }
        else
        {
            errorMensaje = "Error al guardar la Fuente en la base de datos.";
        }
    }
    private void AbrirModal()
    {
        mostrarModal = true;
        nombreFuente = "";
    }
    private void CerrarModal()
    {
        mostrarModal = false;
    }
    private async Task ConsultarFuente()
    {
        if (string.IsNullOrEmpty(codigoFuenteConsulta))
        {
            errorMensaje = "Debe ingresar un código de Fuente.";
            return;
        }

        var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "fuente", "Id", codigoFuenteConsulta);

        if (resultado != null)
        {
            fuenteConsultado = resultado;
            nombrefuenteConsulta = ObtenerValor(resultado, "nombre");
        }
        else
        {
            errorMensaje = "No se encontró el Fuente.";
            fuenteConsultado = null;
            nombrefuenteConsulta = "";
        }
    }
    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        codigoFuenteConsulta = "";
        fuenteConsultado = null;
        nombrefuenteConsulta = "";
    }

    private void EditarFuenteSeleccionado()
    {
        var seleccionado = FuentesSeleccionado.FirstOrDefault(x => x.Value).Key;
        if (seleccionado != null)
        {
            EditarFuente(seleccionado);
        }
        else
        {
            errorMensaje = "Debe seleccionar una Fuente para editar.";
        }
    }
    private void EditarFuente(Dictionary<string, object> fuente)
    {
        fuenteParaEditar = fuente;
        
        // Cargar datos de fuente en el formulario de edición
        codigoFuenteEditar = ObtenerValor(fuente, "id");
        nombreFuenteEditar = ObtenerValor(fuente, "nombre");
        
        mostrarModalEditar = true;
    }
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }
    private async Task ActualizarFuente()
    {
        if (!puedeEditar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }

        if (fuenteParaEditar == null || string.IsNullOrEmpty(nombreFuenteEditar))
        {
            errorMensaje = "El nombre de la Fuente es obligatorio.";
            return;
        }

        var datosfuenteActualizado = new Dictionary<string, object>
        {
            { "id", codigoFuenteEditar },
            { "nombre", nombreFuenteEditar },
        };

        bool resultado = await servicioEntidad.ActualizarAsync(
        "proyecto",
        "fuente",
        "id",                    // <- este es el nombre de la clave primaria
        codigoFuenteEditar,  // <- este es el valor de la clave primaria
        datosfuenteActualizado);


        if (resultado)
        {
            // Actualizar la fuente en la lista local
            int indice = Fuentes.IndexOf(fuenteParaEditar);
            if (indice >= 0)
            {
                Fuentes[indice] = datosfuenteActualizado;
                FuentesSeleccionado.Remove(fuenteParaEditar);
                FuentesSeleccionado[datosfuenteActualizado] = false;
            }
            CerrarModalEditar();
        }
        else
        {
            errorMensaje = "Error al actualizar la Fuente en la base de datos.";
        }
    }
    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
        fuenteParaEditar = null;
    }
    private void EliminarFuente(Dictionary<string, object> fuente)
    {
        FuenteParaEliminar = fuente;
        mostrarModalEliminar = true;
    }
    private async Task ConfirmarEliminarFuente()
    {
        if (FuenteParaEliminar != null)
        {
            string id = ObtenerValor(FuenteParaEliminar, "id");
            
            // Eliminar de la base de datos
            bool resultado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "fuente", 
                "id", 
                id);
                
            if (resultado)
            {
                // Eliminar de la lista local
                Fuentes.Remove(FuenteParaEliminar);
                FuentesSeleccionado.Remove(FuenteParaEliminar);
            }
            else
            {
                errorMensaje = "Error al eliminar la Fuente de la base de datos.";
            }
            
            CerrarModalEliminar();
        }
    }
    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        FuenteParaEliminar = null;
    }
    private void MostrarModalEliminarMultiples()
    {
        // Verificar si hay Fuentes seleccionadas
        var haySeleccionados = FuentesSeleccionado.Any(x => x.Value);
        if (!haySeleccionados)
        {
            errorMensaje = "Debe seleccionar al menos una Fuente para eliminar.";
            return;
        }
        
        mostrarModalEliminarMultiples = true;
    }
    private async Task ConfirmarEliminarSeleccionados()
    {
        await EliminarSeleccionados();
        CerrarModalEliminarMultiples();
    }
    private async Task EliminarSeleccionados()
    {
        if (!puedeAgregarEliminar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }
        
        var seleccionados = FuentesSeleccionado.Where(x => x.Value).Select(x => x.Key).ToList();
        
        foreach (var fuente in seleccionados)
        {
            string codigo = ObtenerValor(fuente, "id");
            bool resultado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "fuente", 
                "id", 
                codigo);
                
            if (resultado)
            {
                Fuentes.Remove(fuente);
                FuentesSeleccionado.Remove(fuente);
            }
        }
        seleccionarTodos = false;
    }
    private void CerrarModalEliminarMultiples()
    {
        mostrarModalEliminarMultiples = false;
    }
}