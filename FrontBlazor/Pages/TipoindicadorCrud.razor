@page "/tipoindicador"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JS

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Tipo Indicador </b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>
                        <!-- Mostrar botones según rol -->
                        @if (puedeAgregarEliminar)
                        {
                            <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                                <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                            </button>
                        }
                        @if (puedeAgregarEliminar)
                        {
                            <button class="btn btn-success btn-sm" @onclick="AbrirModal">
                                <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                            </button>
                        }
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (TipoIndicadores == null || TipoIndicadores.Count == 0)
            {
                <p>No hay Tipo indicadores.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            @if (puedeAgregarEliminar)
                            {
                                <th>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@seleccionarTodos" disabled="@(!puedeAgregarEliminar)">
                                        <label></label>
                                    </span>
                                </th>
                            }
                            <th>Id</th>
                            <th>Nombre</th>
                            @if (puedeEditar || puedeAgregarEliminar)
                            {
                                <th>Accion</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var tipoindicador in TipoIndicadores)
                        {
                            <tr>
                                @if (puedeAgregarEliminar) // Solo mostrar checkbox si tiene permiso para eliminar
                                {
                                    <td>
                                        <span class="custom-checkbox">
                                            <input type="checkbox" @bind="@TipoIndicadoresSeleccionado[tipoindicador]" disabled="@(!puedeAgregarEliminar)">
                                            <label></label>
                                        </span>
                                    </td>
                                }
                                <td>@ObtenerValor(tipoindicador, "id")</td>
                                <td>@ObtenerValor(tipoindicador, "nombre")</td>
                                @if (puedeEditar || puedeAgregarEliminar)
                                {
                                    <td>
                                        @if (puedeEditar)
                                        {
                                            <a href="#" class="edit" @onclick="() => EditarTipoIndicador(tipoindicador)" @onclick:preventDefault>
                                                <i class="material-icons" title="Editar">&#xE254;</i>
                                            </a>
                                        }
                                        @if (puedeAgregarEliminar)
                                        {
                                            <a href="#" class="delete" @onclick="() => EliminarTipoIndicador(tipoindicador)" @onclick:preventDefault>
                                                <i class="material-icons" title="Eliminar">&#xE872;</i>
                                            </a>
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="GuardarTipoIndicador">
                    <div class="modal-header">
                        <h4 class="modal-title">Agregar un Tipo de Indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" @bind="nombreTipoIndicador" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Tipo Indicador</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Código del Tipo Indicador</label>
                        <input type="text" class="form-control" @bind="codigoTipoIndicadorConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarTipoIndicador">Buscar</button>

                    @if (tipoindicadorConsultado != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" value="@nombretipoindicadorConsulta" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="this" OnValidSubmit="ActualizarTipoIndicador">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Tipo de Indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Id</label>
                            <input type="text" class="form-control" @bind="codigoTipoIndicadorEditar" readonly>
                        </div>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" @bind="nombreTipoIndicadorEditar" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}



@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarTipoIndicador">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Tipo Indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro(a) de que desea eliminar este Tipo Indicador?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Tipos de Indicadores Seleccionados</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar los Tipos de Indicadores seleccionados?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    private List<Dictionary<string, object>> TipoIndicadores = new List<Dictionary<string, object>>();
    private Dictionary<Dictionary<string, object>, bool> TipoIndicadoresSeleccionado = new();
    private bool cargando = true;
    private string? errorMensaje = null;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var clave in TipoIndicadoresSeleccionado.Keys.ToList())
            {
                TipoIndicadoresSeleccionado[clave] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;
    private bool mostrarModal = false;
    private string IdTipoIndicador = "";
    private string nombreTipoIndicador = "";

    // Variables para controlar el modal de consulta
    private bool mostrarModalConsulta = false;
    private string codigoTipoIndicadorConsulta = "";

    // Variables para mostrar los datos del tipoindicador consultado
    private Dictionary<string, object>? tipoindicadorConsultado = null;
    private string nombretipoindicadorConsulta = "";
    private int stocktipoindicadorConsulta = 0;
    private decimal valorUnitariotipoindicadorConsulta = 0.0m;

    // Variables para el modal de edición
    private bool mostrarModalEditar = false;
    private Dictionary<string, object>? tipoindicadorParaEditar = null;
    private string codigoTipoIndicadorEditar = "";
    private string nombreTipoIndicadorEditar = "";

    // Variables para el modal de eliminación
    private bool mostrarModalEliminar = false;
    private Dictionary<string, object>? TipoIndicadorParaEliminar = null;

    // Variables para el modal de eliminación múltiple
    private bool mostrarModalEliminarMultiples = false;

    // Nuevas propiedades para control de acceso
    private bool esAdmin = false;
    private bool esValidador = false;
    private bool esVerificador = false;
    private bool puedeEditar => esAdmin || esValidador;
    private bool puedeAgregarEliminar => esAdmin;
    private bool puedeConsultar => true; // Todos pueden consultar
    protected override async Task OnInitializedAsync()
    {
        await CargarTipoIndicador();
        await VerificarRoles();
    }
    private async Task VerificarRoles()
    {
        // Obtener roles de sessionStorage
        var rolAdmin = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_admin");
        var rolValidador = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_Validador");
        var rolVerificador = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_Verificador");

        esAdmin = !string.IsNullOrEmpty(rolAdmin);
        esValidador = !string.IsNullOrEmpty(rolValidador);
        esVerificador = !string.IsNullOrEmpty(rolVerificador);
    }
    private async Task CargarTipoIndicador()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "tipoindicador");
            TipoIndicadores = resultado ?? new List<Dictionary<string, object>>();
            TipoIndicadoresSeleccionado = TipoIndicadores.ToDictionary(p => p, p => false);
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar tipo indicador: {ex.Message}";
            TipoIndicadores = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }
    private async Task GuardarTipoIndicador()
    {
        if (!puedeAgregarEliminar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }

        if (string.IsNullOrEmpty(nombreTipoIndicador))
        {
            errorMensaje = "El código y el nombre del tipo indicador son obligatorios.";
            return;
        }

        var nuevoTipoIndicador = new Dictionary<string, object>
        {
            { "nombre", nombreTipoIndicador },
        };

        bool resultado = await servicioEntidad.CrearAsync("proyecto", "tipoindicador", nuevoTipoIndicador);

        if (resultado)
        {
            await CargarTipoIndicador(); // 🔄 Refrescar para obtener el ID generado por la base de datos
            CerrarModal();
        }
        else
        {
            errorMensaje = "Error al guardar el tipo indicador en la base de datos.";
        }
    }


    private void AbrirModal()
    {
        mostrarModal = true;
        nombreTipoIndicador = "";
    }

    private void CerrarModal()
    {
        mostrarModal = false;
    }
    private async Task ConsultarTipoIndicador()
    {
        if (string.IsNullOrEmpty(codigoTipoIndicadorConsulta))
        {
            errorMensaje = "Debe ingresar un código de tipo de indicador.";
            return;
        }

        var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "tipoindicador", "Id", codigoTipoIndicadorConsulta);

        if (resultado != null)
        {
            tipoindicadorConsultado = resultado;
            nombretipoindicadorConsulta = ObtenerValor(resultado, "nombre");
        }
        else
        {
            errorMensaje = "No se encontró el tipo indicador.";
            tipoindicadorConsultado = null;
            nombretipoindicadorConsulta = "";
        }
    }
    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        codigoTipoIndicadorConsulta = "";
        tipoindicadorConsultado = null;
        nombretipoindicadorConsulta = "";
    }

    private void EditarTipoIndicadorSeleccionado()
    {
        var seleccionado = TipoIndicadoresSeleccionado.FirstOrDefault(x => x.Value).Key;
        if (seleccionado != null)
        {
            EditarTipoIndicador(seleccionado);
        }
        else
        {
            errorMensaje = "Debe seleccionar un tipo indicador para editar.";
        }
    }
    private void EditarTipoIndicador(Dictionary<string, object> tipoindicador)
    {
        tipoindicadorParaEditar = tipoindicador;
        
        // Cargar datos del tipoindicador en el formulario de edición
        codigoTipoIndicadorEditar = ObtenerValor(tipoindicador, "id");
        nombreTipoIndicadorEditar = ObtenerValor(tipoindicador, "nombre");
        
        mostrarModalEditar = true;
    }
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }
    private async Task ActualizarTipoIndicador()
    {
        if (!puedeEditar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }

        if (tipoindicadorParaEditar == null || string.IsNullOrEmpty(nombreTipoIndicadorEditar))
        {
            errorMensaje = "El nombre del tipo indicador es obligatorio.";
            return;
        }

        var datostipoindicadorActualizado = new Dictionary<string, object>
        {
            { "id", codigoTipoIndicadorEditar },
            { "nombre", nombreTipoIndicadorEditar },
        };

        bool resultado = await servicioEntidad.ActualizarAsync(
        "proyecto",
        "tipoindicador",
        "id",                    // <- este es el nombre de la clave primaria
        codigoTipoIndicadorEditar,  // <- este es el valor de la clave primaria
        datostipoindicadorActualizado);


        if (resultado)
        {
            // Actualizar el tipoindicador en la lista local
            int indice = TipoIndicadores.IndexOf(tipoindicadorParaEditar);
            if (indice >= 0)
            {
                TipoIndicadores[indice] = datostipoindicadorActualizado;
                TipoIndicadoresSeleccionado.Remove(tipoindicadorParaEditar);
                TipoIndicadoresSeleccionado[datostipoindicadorActualizado] = false;
            }
            CerrarModalEditar();
        }
        else
        {
            errorMensaje = "Error al actualizar el tipo indicador en la base de datos.";
        }
    }
    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
        tipoindicadorParaEditar = null;
    }
    private void EliminarTipoIndicador(Dictionary<string, object> tipoindicador)
    {
        TipoIndicadorParaEliminar = tipoindicador;
        mostrarModalEliminar = true;
    }
    private async Task ConfirmarEliminarTipoIndicador()
    {
        if (TipoIndicadorParaEliminar != null)
        {
            string id = ObtenerValor(TipoIndicadorParaEliminar, "id");
            
            // Eliminar de la base de datos
            bool resultado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "tipoindicador", 
                "id", 
                id);
                
            if (resultado)
            {
                // Eliminar de la lista local
                TipoIndicadores.Remove(TipoIndicadorParaEliminar);
                TipoIndicadoresSeleccionado.Remove(TipoIndicadorParaEliminar);
            }
            else
            {
                errorMensaje = "Error al eliminar el tipo indicador de la base de datos.";
            }
            
            CerrarModalEliminar();
        }
    }
    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        TipoIndicadorParaEliminar = null;
    }
    private void MostrarModalEliminarMultiples()
    {
        // Verificar si hay tipoindicadores seleccionados
        var haySeleccionados = TipoIndicadoresSeleccionado.Any(x => x.Value);
        if (!haySeleccionados)
        {
            errorMensaje = "Debe seleccionar al menos un tipo indicador para eliminar.";
            return;
        }
        
        mostrarModalEliminarMultiples = true;
    }
    private async Task ConfirmarEliminarSeleccionados()
    {
        await EliminarSeleccionados();
        CerrarModalEliminarMultiples();
    }
    private async Task EliminarSeleccionados()
    {
        if (!puedeAgregarEliminar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }
        
        var seleccionados = TipoIndicadoresSeleccionado.Where(x => x.Value).Select(x => x.Key).ToList();
        
        foreach (var tipoindicador in seleccionados)
        {
            string codigo = ObtenerValor(tipoindicador, "id");
            bool resultado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "tipoindicador", 
                "id", 
                codigo);
                
            if (resultado)
            {
                TipoIndicadores.Remove(tipoindicador);
                TipoIndicadoresSeleccionado.Remove(tipoindicador);
            }
        }
        
        seleccionarTodos = false;
    }
    private void CerrarModalEliminarMultiples()
    {
        mostrarModalEliminarMultiples = false;
    }
}