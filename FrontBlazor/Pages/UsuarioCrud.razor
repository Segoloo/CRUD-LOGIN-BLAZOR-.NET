@page "/usuario"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JS

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Usuario</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>
                        <!-- Mostrar botones según rol -->
                        @if (puedeAgregarEliminar)
                        {
                            <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                                <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                            </button>
                        }
                        @if (puedeAgregarEliminar)
                        {
                            <button class="btn btn-success btn-sm" @onclick="AbrirModal">
                                <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                            </button>
                        }
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (Usuarios == null || Usuarios.Count == 0)
            {
                <p>No hay Usuario.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            @if (puedeAgregarEliminar)
                            {
                                <th>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@seleccionarTodos" disabled="@(!puedeAgregarEliminar)">
                                        <label></label>
                                    </span>
                                </th>
                            }
                            <th>Email</th>
                            @if (puedeEditar || puedeAgregarEliminar)
                            {
                                <th>Accion</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var usuario in Usuarios)
                        {
                            <tr>
                                @if (puedeAgregarEliminar) // Solo mostrar checkbox si tiene permiso para eliminar
                                {
                                    <td>
                                        <span class="custom-checkbox">
                                            <input type="checkbox" @bind="@UsuariosSeleccionado[usuario]" disabled="@(!puedeAgregarEliminar)">
                                            <label></label>
                                        </span>
                                    </td>
                                }
                                <td>@ObtenerValor(usuario, "email")</td>
                                @if (puedeEditar || puedeAgregarEliminar)
                                {
                                    <td>
                                        @if (puedeEditar)
                                        {
                                            <a href="#" class="edit" @onclick="() => EditarUsuario(usuario)" @onclick:preventDefault>
                                                <i class="material-icons" title="Editar">&#xE254;</i>
                                            </a>
                                        }
                                        @if (puedeAgregarEliminar)
                                        {
                                            <a href="#" class="delete" @onclick="() => EliminarUsuario(usuario)" @onclick:preventDefault>
                                                <i class="material-icons" title="Eliminar">&#xE872;</i>
                                            </a>
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="GuardarUsuario">
                    <div class="modal-header">
                        <h4 class="modal-title">Agregar Usuario</h4>
                        <button type="button" class="close" @onclick="CerrarModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="text" class="form-control" @bind="IdUsuario">
                        </div>
                        <div class="form-group">
                            <label>Contrasena</label>
                            <input type="text" class="form-control" @bind="nombreUsuario" required>
                        </div>
                        <div class="form-group">
                            <label>Rol</label>
                            <select class="form-control" @bind="Fkidrol" required>
                                <option value="">Seleccione...</option>
                                @foreach (var rol in Rol)
                                {
                                    <option value="@rol.Id">@rol.Nombre</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Usuario</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Código del Usuario</label>
                        <input type="text" class="form-control" @bind="codigoUsuarioConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarUsuario">Buscar</button>
                    @* Aquí va el bloque para mostrar fuentes *@
                    @if (nombresrolConsultado != null && nombresrolConsultado.Count > 0)
                    {
                        <hr />
                        <h5>Roles del usuario</h5>
                        <ul class="list-group">
                            @foreach (var rol in nombresrolConsultado)
                            {
                                <li class="list-group-item">
                                    Rol: @rol
                                </li>
                            }
                        </ul>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="this" OnValidSubmit="ActualizarUsuario">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Usuario</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="text" class="form-control" @bind="codigoUsuarioEditar" readonly>
                        </div>
                        <div class="form-group">
                            <label>Contrasena</label>
                            <input type="text" class="form-control" @bind="nombreUsuarioEditar" required>
                        </div>
                        <div class="form-group">
                            <label>Rol</label>
                            <select class="form-control" @bind="foranearolEditar" required>
                                <option value="">Seleccione...</option>
                                @foreach (var rol in Rol)
                                {
                                    <option value="@rol.Id">@rol.Nombre</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}



@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarUsuario">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Usuario</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro(a) de que desea eliminar este Usuario?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Usuarios Seleccionados</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar los Usuarios seleccionados?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>  
    </div>
}

@code {
    private List<Dictionary<string, object>> Usuarios = new List<Dictionary<string, object>>();
    private Dictionary<Dictionary<string, object>, bool> UsuariosSeleccionado = new();
    private bool cargando = true;
    private string? errorMensaje = null;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var clave in UsuariosSeleccionado.Keys.ToList())
            {
                UsuariosSeleccionado[clave] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;
    private bool mostrarModal = false;
    private string IdUsuario = "";
    private string nombreUsuario = "";
    private string Fkidrol = "";
    private string FkidUsuario = "";
    private string Fkidusuario = "";

    // Variables para controlar el modal de consulta
    private bool mostrarModalConsulta = false;
    private string codigoUsuarioConsulta = "";

    // Variables para mostrar los datos del sentido consultado
    private Dictionary<string, object>? usuarioConsultado = null;
    private List<Dictionary<string, object>> idrolConsultado = new();
    private string nombreusuarioConsulta = "";
    private int stockusuarioConsulta = 0;
    private decimal valorUnitariousuarioConsulta = 0.0m;
    List<string> nombresrolConsultado;

    // Variables para el modal de edición
    private bool mostrarModalEditar = false;
    private Dictionary<string, object>? usuarioParaEditar = null;
    private string codigoUsuarioEditar = "";
    private string nombreUsuarioEditar = "";
    private string foranearolEditar = "";

    // Variables para el modal de eliminación
    private bool mostrarModalEliminar = false;
    private Dictionary<string, object>? UsuarioParaEliminar = null;
    public class OpcionSeleccion
    {
        public string Id { get; set; }
        public string Nombre { get; set; }
    }
    // Variables para listas
    List<OpcionSeleccion> Rol = new();

    // Variables para el modal de eliminación múltiple
    private bool mostrarModalEliminarMultiples = false;

    // Nuevas propiedades para control de acceso
    private bool esAdmin = false;
    private bool esValidador = false;
    private bool esVerificador = false;
    private bool puedeEditar => esAdmin || esValidador;
    private bool puedeAgregarEliminar => esAdmin;
    private bool puedeConsultar => true; // Todos pueden consultar
    protected override async Task OnInitializedAsync()
    {
        await CargarUsuario();
        await CargarOpciones();
        await VerificarRoles();
    }
    private async Task VerificarRoles()
    {
        // Obtener roles de sessionStorage
        var rolAdmin = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_admin");
        var rolValidador = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_Validador");
        var rolVerificador = await JS.InvokeAsync<string>("sessionStorage.getItem", "rol_Verificador");

        esAdmin = !string.IsNullOrEmpty(rolAdmin);
        esValidador = !string.IsNullOrEmpty(rolValidador);
        esVerificador = !string.IsNullOrEmpty(rolVerificador);
    }
    private async Task CargarOpciones()
    {
        try
        {
            var roles = await servicioEntidad.ObtenerTodosAsync("proyecto", "rol");
            Rol = roles?.Select(t => new OpcionSeleccion
            {
                Id = t["id"].ToString(),
                Nombre = t["nombre"].ToString()
            }).ToList() ?? new();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar opciones: {ex.Message}";
        }
    }
    private async Task CargarUsuario()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "usuario");
            Usuarios = resultado ?? new List<Dictionary<string, object>>();
            UsuariosSeleccionado = Usuarios.ToDictionary(p => p, p => false);
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar usuario: {ex.Message}";
            Usuarios = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }
    private async Task GuardarUsuario()
    {
        if (!puedeAgregarEliminar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }

        if (string.IsNullOrEmpty(IdUsuario) || string.IsNullOrEmpty(nombreUsuario) ||
            string.IsNullOrEmpty(Fkidrol))
        {
            errorMensaje = "El email y la contrasena del Usuario son obligatorios.";
            return;
        }

        var nuevoUsuario = new Dictionary<string, object>
        {
            { "email", IdUsuario },
            { "contrasena", nombreUsuario },
        };

        bool resultado = await servicioEntidad.CrearAsync("proyecto", "usuario", nuevoUsuario);
        
        var roles = new Dictionary<string, object>
        {
            { "fkemail", IdUsuario },
            { "fkidrol", Fkidrol },
        };

        var rol = await servicioEntidad.EjecutarProcedimientoAsync(
            "proyecto",
            "rol_usuario",
            "InsertarRolUsuario",
            roles);

        if (resultado == true && rol != null)
        {
            await CargarUsuario(); // 🔄 Refrescar para obtener el ID generado por la base de datos
            CerrarModal();
        }
        else
        {
            errorMensaje = "Error al guardar el Usuario en la base de datos.";
        }
    }
    private void AbrirModal()
    {
        mostrarModal = true;
        nombreUsuario = "";
    }

    private void CerrarModal()
    {
        mostrarModal = false;
    }
    private async Task ConsultarUsuario()
    {
        if (string.IsNullOrEmpty(codigoUsuarioConsulta))
        {
            errorMensaje = "Debe ingresar un código de Usuario.";
            return;
        }

        var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "usuario", "email", codigoUsuarioConsulta);

        if (resultado != null)
        {
            usuarioConsultado = resultado;

            idrolConsultado = await servicioEntidad.ObtenerTodosAsync("proyecto", $"rol_usuario/fkemail/{codigoUsuarioConsulta}") ?? new();
            nombresrolConsultado = new List<string>();
            foreach (var item in idrolConsultado)
            {
                string idRV = ObtenerValor(item, "fkidrol");
                
                if (!string.IsNullOrEmpty(idRV))
                {
                    var datosRV = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "rol", "id", idRV);
                    string nombre = ObtenerValor(datosRV, "nombre");

                    if (!string.IsNullOrEmpty(nombre))
                    {
                        nombresrolConsultado.Add(nombre);
                    }
                }
            }
        }
        else
        {
            errorMensaje = "No se encontró el Usuario.";
            usuarioConsultado = null;
            nombreusuarioConsulta = "";
            nombresrolConsultado.Clear();
        }
    }
    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        codigoUsuarioConsulta = "";
        usuarioConsultado = null;
        nombreusuarioConsulta = "";
    }

    private void EditarUsuarioSeleccionado()
    {
        var seleccionado = UsuariosSeleccionado.FirstOrDefault(x => x.Value).Key;
        if (seleccionado != null)
        {
            EditarUsuario(seleccionado);
        }
        else
        {
            errorMensaje = "Debe seleccionar un Usuario para editar.";
        }
    }
    private void EditarUsuario(Dictionary<string, object> usuario)
    {
        usuarioParaEditar = usuario;
        
        // Cargar datos de sentido en el formulario de edición
        codigoUsuarioEditar = ObtenerValor(usuario, "email");
        nombreUsuarioEditar = ObtenerValor(usuario, "contrasena");
        
        mostrarModalEditar = true;
    }
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }
    private async Task ActualizarUsuario()
    {
        if (!puedeEditar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }

        if (usuarioParaEditar == null || string.IsNullOrEmpty(nombreUsuarioEditar))
        {
            errorMensaje = "La contrasena del Usuario es obligatorio.";
            return;
        }

        var datosusuarioActualizado = new Dictionary<string, object>
        {
            { "email", codigoUsuarioEditar },
            { "contrasena", nombreUsuarioEditar },
        };

        bool resultado = await servicioEntidad.ActualizarAsync(
        "proyecto",
        "usuario",
        "email",                    // <- este es el nombre de la clave primaria
        codigoUsuarioEditar,  // <- este es el valor de la clave primaria
        datosusuarioActualizado);


        if (resultado)
        {
            // Actualizar la sentido en la lista local
            int indice = Usuarios.IndexOf(usuarioParaEditar);
            if (indice >= 0)
            {
                Usuarios[indice] = datosusuarioActualizado;
                UsuariosSeleccionado.Remove(usuarioParaEditar);
                UsuariosSeleccionado[datosusuarioActualizado] = false;
            }
            CerrarModalEditar();
        }
        else
        {
            errorMensaje = "Error al actualizar el Usuario en la base de datos.";
        }
        var roles = new Dictionary<string, object>
        {
            { "fkemail", codigoUsuarioEditar },
            { "fkidrol", foranearolEditar },
        };

        var rol = await servicioEntidad.EjecutarProcedimientoAsync(
            "proyecto",
            "rol_usuario",
            "InsertarRolUsuario",
            roles);
    }
    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
        usuarioParaEditar = null;
    }
    private void EliminarUsuario(Dictionary<string, object> usuario)
    {
        UsuarioParaEliminar = usuario;
        mostrarModalEliminar = true;
    }
    private async Task ConfirmarEliminarUsuario()
    {
        if (UsuarioParaEliminar != null)
        {
            string id = ObtenerValor(UsuarioParaEliminar, "email");
            
            // Eliminar de la base de datos
            bool resultado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "usuario", 
                "email", 
                id);
                
            if (resultado)
            {
                // Eliminar de la lista local
                Usuarios.Remove(UsuarioParaEliminar);
                UsuariosSeleccionado.Remove(UsuarioParaEliminar);
            }
            else
            {
                errorMensaje = "Error al eliminar el Usuario de la base de datos.";
            }
            
            CerrarModalEliminar();
        }
    }
    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        UsuarioParaEliminar = null;
    }
    private void MostrarModalEliminarMultiples()
    {
        // Verificar si hay sentido seleccionados
        var haySeleccionados = UsuariosSeleccionado.Any(x => x.Value);
        if (!haySeleccionados)
        {
            errorMensaje = "Debe seleccionar al menos un Usuario para eliminar.";
            return;
        }
        
        mostrarModalEliminarMultiples = true;
    }
    private async Task ConfirmarEliminarSeleccionados()
    {
        await EliminarSeleccionados();
        CerrarModalEliminarMultiples();
    }
    private async Task EliminarSeleccionados()
    {
        if (!puedeAgregarEliminar)
        {
            await JS.InvokeVoidAsync("alert", "No tiene permisos para esta acción");
            return;
        }
        
        var seleccionados = UsuariosSeleccionado.Where(x => x.Value).Select(x => x.Key).ToList();
        
        foreach (var usuario in seleccionados)
        {
            string codigo = ObtenerValor(usuario, "email");
            bool resultado = await servicioEntidad.EliminarAsync(
                "proyecto", 
                "usuario", 
                "email", 
                codigo);
                
            if (resultado)
            {
                Usuarios.Remove(usuario);
                UsuariosSeleccionado.Remove(usuario);
            }
        }
        seleccionarTodos = false;
    }
    private void CerrarModalEliminarMultiples()
    {
        mostrarModalEliminarMultiples = false;
    }
}